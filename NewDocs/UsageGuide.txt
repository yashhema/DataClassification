Usage Guide: Data Classification Platform
1. Overview
This guide provides instructions for running the Asynchronous Data Classification Platform. The application is launched from the command line using main.py and can be started in one of three operational modes, depending on the deployment requirements.
Properly shutting down the application is critical to ensure that in-progress tasks are not lost. A graceful shutdown should always be initiated by pressing CTRL+C in the terminal where the application is running.
2. Operational Modes
The application's run mode determines which components are activated. The mode can be specified via the --mode command-line argument. If no mode is specified, it defaults to the deployment_model set in the system configuration file.
2.1. Single-Process Mode
Command: python main.py --mode single_process
Use Case: Ideal for local development, testing, and small-scale demonstrations.
In this mode, all system components—the Orchestrator, a pool of Workers, and all background monitoring services—are started and run concurrently within a single process. It is the easiest way to run the entire platform on a single machine without any external dependencies beyond the database.
2.2. Orchestrator Mode
Command: python main.py --mode orchestrator
Use Case: For distributed or containerized deployments (e.g., Kubernetes, Docker), this mode is used to run the control plane.
This mode starts only the Orchestrator and its associated background services (JobMonitor, Pipeliner, Reaper, TaskAssigner). It does not start any Workers. The Orchestrator will manage jobs and assign tasks, but it relies on one or more separate Worker instances to connect to it and perform the actual data processing.
2.3. Worker Mode
Command: python main.py --mode worker
Use Case: For distributed or containerized deployments, this mode is used to run the processing engines.
This mode starts only the Worker component(s). A worker process is lightweight and designed for execution. Upon starting, it will connect to the central Orchestrator (via a configured URL) to request tasks. Multiple worker instances can be run on different machines to scale out the data processing capabilities of the platform horizontally.
3. Running the Application
To Start the Application:
Navigate to the source directory in your terminal.
Run the main script with the desired mode.
For development:
python main.py --mode single_process


For a distributed deployment (Orchestrator):
python main.py --mode orchestrator


For a distributed deployment (Worker):
python main.py --mode worker


To Stop the Application:
To ensure a clean shutdown, press CTRL+C in the terminal window where the application is running.
The system will catch this signal and initiate a graceful shutdown process:
No new tasks will be assigned.
In-progress tasks will be allowed to finish.
All components will cleanly shut down their connections and background processes.
This prevents data loss and ensures that jobs can be safely resumed later.
