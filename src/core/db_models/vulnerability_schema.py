# In a new file: core/db_models/vulnerability_schema.py
"""
Defines the database schema for the CVE catalog, applicability rules,
and vulnerability scan findings.
"""
from .base import Base
from typing import List, Optional, Dict, Any
from datetime import datetime
from sqlalchemy import (
    String, Integer, ForeignKey, DateTime, JSON, Boolean, Text
)
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy.dialects.mssql import NVARCHAR, DATETIMEOFFSET

class VulnerabilityFinding(Base):
    __tablename__ = 'vulnerability_findings'
    datasource_id: Mapped[str] = mapped_column(NVARCHAR(255), primary_key=True)
    cve_id: Mapped[str] = mapped_column(NVARCHAR(50), primary_key=True)
    cycle_id: Mapped[str] = mapped_column(NVARCHAR(255), primary_key=True)
    status: Mapped[str] = mapped_column(NVARCHAR(50), nullable=False)
    details: Mapped[Optional[Dict[str, Any]]] = mapped_column(JSON)

class CVEDefinition(Base):
    __tablename__ = 'cve_definitions'
    cve_id: Mapped[str] = mapped_column(NVARCHAR(50), primary_key=True)
    description: Mapped[Optional[str]] = mapped_column(NVARCHAR(None)) # nvarchar(max)
    severity: Mapped[Optional[str]] = mapped_column(NVARCHAR(50))
    cvss_score: Mapped[Optional[str]] = mapped_column(String(10)) # Stored as string for formats like "9.8"
    published_date: Mapped[Optional[datetime]] = mapped_column(DATETIMEOFFSET(7))
    requires_configuration_check: Mapped[bool] = mapped_column(Boolean, default=False)
    
    affected_ranges: Mapped[List["CVEAffectedRange"]] = relationship(back_populates="cve_definition")
    mitigation_options: Mapped[List["CVEMitigationOption"]] = relationship(back_populates="cve_definition")

class ProductCatalog(Base):
    __tablename__ = 'product_catalog'
    id: Mapped[int] = mapped_column(primary_key=True)
    product_name: Mapped[str] = mapped_column(NVARCHAR(255), unique=True, nullable=False)
    vendor: Mapped[Optional[str]] = mapped_column(NVARCHAR(255))
    patch_naming_convention: Mapped[Optional[str]] = mapped_column(NVARCHAR(100))
    supports_cve_tracking: Mapped[bool] = mapped_column(Boolean, default=True)

class CVEAffectedRange(Base):
    __tablename__ = 'cve_affected_ranges'
    id: Mapped[int] = mapped_column(primary_key=True)
    cve_id: Mapped[str] = mapped_column(ForeignKey('cve_definitions.cve_id'), nullable=False)
    product_id: Mapped[int] = mapped_column(ForeignKey('product_catalog.id'), nullable=False)
    min_affected_version: Mapped[Optional[str]] = mapped_column(NVARCHAR(100))
    max_affected_version: Mapped[Optional[str]] = mapped_column(NVARCHAR(100))
    fixed_in_version: Mapped[Optional[str]] = mapped_column(NVARCHAR(100))
    configuration_prerequisite: Mapped[Optional[str]] = mapped_column(NVARCHAR(1000))
    
    cve_definition: Mapped["CVEDefinition"] = relationship(back_populates="affected_ranges")

class CVEMitigationOption(Base):
    __tablename__ = 'cve_mitigation_options'
    id: Mapped[int] = mapped_column(primary_key=True)
    cve_id: Mapped[str] = mapped_column(ForeignKey('cve_definitions.cve_id'), nullable=False)
    mitigation_type: Mapped[Optional[str]] = mapped_column(NVARCHAR(100))
    verification_query: Mapped[Optional[str]] = mapped_column(NVARCHAR(None)) # nvarchar(max)
    mitigation_details: Mapped[Optional[str]] = mapped_column(NVARCHAR(None)) # nvarchar(max)

    cve_definition: Mapped["CVEDefinition"] = relationship(back_populates="mitigation_options")